index e08c8ec..04ed4ba 100644
--- a/InfoAboutPC/Form1.cs
+++ b/InfoAboutPC/Form1.cs
@@ -8,6 +8,7 @@ namespace InfoAboutPC
 {
     public partial class Form1 : Form
     {
+        private System.Windows.Forms.Timer timer;
         private PerformanceCounter cpuCounter;
         private PerformanceCounter ramCounter;
 
@@ -21,12 +22,38 @@ namespace InfoAboutPC
         private void InitializePerformanceCounters()
         {
             cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
-            ramCounter = new PerformanceCounter("Memory", "Available MBytes");
+            ramCounter = new PerformanceCounter("Memory", "% Committed Bytes In Use");
+
+            // Initialize and start a timer to update the chart periodically
+            timer = new System.Windows.Forms.Timer();
+            timer.Interval = 1000;  // Update every second (1000 ms)
+            timer.Tick += Timer_Tick;
+            timer.Start();
+
+        }
+
+        private void Timer_Tick(object sender, EventArgs e)
+        {
+            // Get the current CPU usage value
+            float currentCpuUsage = cpuCounter.NextValue();
+            float currentRamUsage = ramCounter.NextValue();
+
+            // Add the new value to the chart
+            chartCPU.Series["CPU Usage"].Points.AddY(currentCpuUsage);
+            chartRAM.Series["RAM Usage"].Points.AddY(currentRamUsage);
+
+            //Remove old points if the series is too long
+            if (chartCPU.Series["CPU Usage"].Points.Count > 60)
+                chartCPU.Series["CPU Usage"].Points.RemoveAt(0);  // Remove the first point
+            //Remove old points if the series is too long
+            if (chartRAM.Series["RAM Usage"].Points.Count > 60)
+                chartRAM.Series["RAM Usage"].Points.RemoveAt(0);  // Remove the first point
         }
 
         private void SetupCharts()
         {
-            chartCPU.Series.Clear();
+            ChartArea chartAreaCPU = new ChartArea("CPUUsageArea");
+            chartCPU.ChartAreas.Add(chartAreaCPU);
             var seriesCPU = new Series("CPU Usage")
             {
                 ChartType = SeriesChartType.Line,
@@ -36,8 +63,9 @@ namespace InfoAboutPC
             };
             chartCPU.Series.Add(seriesCPU);
 
-            chartRAM.Series.Clear();
-            var seriesRAM = new Series("Available RAM")
+            ChartArea chartAreaRAM = new ChartArea("RAMUsageArea");
+            chartRAM.ChartAreas.Add(chartAreaRAM);
+            var seriesRAM = new Series("RAM Usage")
             {
                 ChartType = SeriesChartType.Line,
                 Color = Color.Blue,
@@ -51,7 +79,6 @@ namespace InfoAboutPC
         {
             treeViewInfo.Nodes.Clear();
             GetSystemInfo();
-            UpdateCharts();
         }
 
         private void GetSystemInfo()
@@ -114,19 +141,6 @@ namespace InfoAboutPC
             treeViewInfo.Nodes.Add(systemInfoNode);
         }
 
-        private void UpdateCharts()
-        {
-            float cpuUsage = cpuCounter.NextValue();
-            float availableRam = ramCounter.NextValue();
-
-            chartCPU.Series["CPU Usage"].Points.AddY(cpuUsage);
-
-            chartRAM.Series["Available RAM"].Points.AddY(availableRam);
-
-            treeViewInfo.Nodes[0].Nodes.Add($"Текущая загрузка CPU: {cpuUsage}%");
-            treeViewInfo.Nodes[0].Nodes.Add($"Доступная RAM: {availableRam} MB");
-        }
-
         private string GetLocalIPAddress()
         {
             string localIP = "Не удалось получить IP-адрес";
